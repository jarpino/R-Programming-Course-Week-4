{
    "contents" : "best <- function(state, outcome) {\n  ## get data by the outcome, will test for valid outcome\n  \n  dt <- getDataByOutcome(outcome)\n  \n  names(dt)[3] <- \"rate\"\n  \n  ## get the data for the state that you want\n  ## function will retun ordered dataset\n  ## and stop on an invalid state\n  dt <- getDataByState(dt, state)\n  \n  # sort by hospital value (column 2) and hospital names (column 3) in alphabetical order\n  dt <- dt[order(dt[,3], dt[,2]), ]\n  \n  ## Return hospital name in that state with lowest 30-day death\n  ## rate\n  \n  return(as.character(as.vector(dt[1,2])))\n  \n}\n\nworst <- function(state, outcome) {\n  ## get data by the outcome, will test for valid outcome\n  \n  dt <- getDataByOutcome(outcome)\n  \n  names(dt)[3] <- \"rate\"\n  \n  ## get the data for the state that you want\n  ## function will retun ordered dataset\n  ## and stop on an invalid state\n  dt <- getDataByState(dt, state)\n  \n  # sort by hospital value (column 2) and hospital names (column 3) in alphabetical order\n  dt <- dt[order(-dt[,3], -dt[,2]), ]\n  \n  ## Return hospital name in that state with highest 30-day death\n  ## rate\n  \n  return(as.character(as.vector(dt[1,2])))\n  \n}\n\ngetDataByOutcome <- function(outcome) {\n  ## Read data from csv file\n  dataTable <- read.csv(\"data/outcome-of-care-measures.csv\", colClasses = \"character\");\n  \n  # - hospital name column\n  hospitalColName <- colnames(dataTable[2])\n  \n  # - state column (useful for rankall function)\n  stateColName <- colnames(dataTable[7])\n  \n  # - death rate column based on outcome\n  \n  if (outcome == 'heart attack'){\n    dataColName <- colnames(dataTable[11])\n  }\n  else if (outcome == 'heart failure') {\n    dataColName <- colnames(dataTable[17])\n  }\n  else if (outcome == 'pneumonia') {\n    dataColName <- colnames(dataTable[23])\n  }\n  else {\n    stop(\"invalid outcome\")\n  }\n  \n  # filter data containing 3 columns:\n  columns <- c(stateColName,hospitalColName,dataColName)\n  \n  # re-assign data frame with only 3 columns\n  reducedTable <- dataTable[columns]\n  \n  # convert death rate (column 3) to numeric\n  \n  reducedTable[, 3] <- suppressWarnings(as.numeric(as.vector(reducedTable[, 3])))\n  \n  # remove rows with NAs in column 2\n  reducedTable <- reducedTable[complete.cases(reducedTable),]\n  \n  # stop on invalid state - no rows in data\n  \n  if (nrow(reducedTable) < 1) {\n    stop(\"no rows returned\")\n  }\n  \n  # return data\n  reducedTable\n  \n}\n\ngetDataByState <- function(data, state) {\n  # filter by state\n  data <- subset(data, State == state)\n  \n  # remove rows with NAs\n  data <- data[complete.cases(data),]\n  \n  # stop on invalid state - no rows in data\n  if (nrow(data) < 1) {\n    stop(\"invalid state\")\n  }\n  \n  # sort on column 3 (death rate) to have lowest value on top\n  data <- data[order(data[,3]), ]\n  \n  ## Return all data based on state and outcome\n  data\n  \n}\n\nrankhospital <- function(state, outcome, num = \"best\") {\n  \n  # if num is numeric then get the data value\n  if (typeof(num) == 'integer'| typeof(num) == 'double'){\n    # if num within data rows...\n    # Read data and filter by outcome\n    data <- getDataByOutcome(outcome)\n    \n    # filter again by state\n    data <- getDataByState(data, state)\n    \n    # filter finally based on ranking/num\n    hospital <- getRanking(data, num)\n    \n    ## Return hospital name in that state with the given rank\n    ## 30-day death rate\n    return(hospital)\n  } \n  # if num is worst then...\n  else if (num == \"worst\"){\n    return(worst(state, outcome))\n    \n  }\n  # if num is 'best' then get data from first row\n  else if (num == \"best\") {\n    \n    return(best(state, outcome))\n    \n  }\n  # else stop with message 'invalid num'\n  else {\n    stop(\"invalid num\")\n  }\n  \n}\n\ngetRanking <- function(data, num) {\n  \n  rows <- nrow(data)\n  \n  # in row=??? and column=2 (death rate)\n  if (num <= rows){\n    \n    # sort by hospital value (column 2) and hospital names (column 3) in alphabetical order\n    data <- data[order(data[,3], data[,2]), ]\n    \n    ## Return hospital name in that state\n    \n    return(as.character(as.vector(data[num,2])))\n    \n  }\n  else {\n    # else num is greater/outside data rows\n    return(NA)\n  }\n  \n}\n\n\nrankall <- function(outcome, num = \"best\") {\n  # Read data and filter by outcome\n  data <- getDataByOutcome(outcome)\n  \n  # extract state column and remove deplicates\n  states <- data$State\n  \n  states <- unique(states)\n  \n  # order alphabetically\n  states <- states[order(states)]\n  \n  # create an empty data frame for returning values\n  dfReturn <- data.frame(hospital = character(length(states))\n                         , state = character(length(states))\n                         , stringsAsFactors = FALSE) \n  \n  ## For each state, find the hospital of the given rank\n  for (i in 1:length(states)) {\n  \n    # if num is numeric then get the data value\n    if (typeof(num) == 'integer'| typeof(num) == 'double'){\n      # if num within data rows...\n      # filter again by state\n      statedata <- getDataByState(data, states[i])\n      \n      # filter finally based on ranking/num\n      hospital <- getRanking(statedata, num)\n      \n      ## Return hospital name in that state with the given rank\n      ## 30-day death rate\n      \n    } \n    # if num is worst then...\n    else if (num == \"worst\"){\n      hospital <- worst(states[i], outcome)\n      \n    }\n    # if num is 'best' then get data from first row\n    else if (num == \"best\") {\n      \n      hospital <- best(states[i], outcome)\n      \n    }\n    # else stop with message 'invalid num'\n    else {\n      stop(\"invalid num\")\n    }\n    \n    dfReturn$hospital[i] <- hospital\n    dfReturn$state[i] <- states[i]\n  \n    }\n  \n  #return dataframe containing hospitals and states\n  dfReturn\n  \n}",
    "created" : 1427569936633.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2645731371",
    "id" : "115CFD02",
    "lastKnownWriteTime" : 1427575703,
    "path" : "~/R Studio/R-Programming-Course-Week-4/rankall.R",
    "project_path" : "rankall.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}